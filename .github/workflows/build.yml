name: Build and Publish 2

on:
  push:
    branches:
      - bate
  workflow_dispatch:
  
jobs:
  build:
    runs-on: windows-latest
    
    steps:
      #签出仓库
      - name: Checkout repository
        uses: actions/checkout@v3
      
      #检查VERSION
      - name: Check if version.txt is modified
        id: check_version_modified
        run: |
          $modified = git diff --name-only $env:GITHUB_SHA ${{ steps.last-commit.outputs.last_commit }} | Select-String -Pattern "VERSION"
          if ($modified) {
            echo "::set-output name=modified::true"
          } else {
            echo "::set-output name=modified::false"
          }
      
      #- name: Setup .NET
      #  uses: actions/setup-dotnet@v3
      #  with:
      #    dotnet-version: '7.0.x'
            
      #设置环版本境变量
      - name: Set APPVEYOR_BUILD_VERSION environ
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        run: |
          echo "APPVEYOR_BUILD_VERSION=$(cat ./VERSION)" >> $env:GITHUB_ENV
          echo $env:APPVEYOR_BUILD_VERSION

      - name: Get version
        id: get_version
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        run:  |
          # MAJOR=$(cat VERSION.txt | cut -d . -f 1)
          # MINOR=$(cat VERSION.txt | cut -d . -f 2)
          # PATCH=$(cat VERSION.txt | cut -d . -f 3)
          $VERSION=$(cat ./VERSION)
          echo "::set-output name=version::$VERSION"

      - name: Use APPVEYOR_BUILD_VERSION environ
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        run: echo $env:APPVEYOR_BUILD_VERSION

      - name: setup-msbuild
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        uses: microsoft/setup-msbuild@v1.3.1
          
      #- name: Setup MSBuild Path
      #  uses: warrenbuckley/Setup-MSBuild@v1
      
      - name: Clean project
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        run: msbuild /t:Clean
        
      #- name: Clear NuGet cache
      #  run: dotnet nuget locals all --clear

      #- name: Restore dependencies
      #  run: dotnet restore
      #  working-directory: /packages
            
      - name: Restore NuGet
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        #run: dotnet restore
        run: nuget restore DGJv3.sln
  
      #构建项目
      - name: Build project
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        run: msbuild DGJv3.sln /p:Configuration=Release

      #获取最后一个提交的注释
      - name: Get last commit message
        id: get_commit_message
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        run: |
          git log -1 --pretty=format:"%s" > commit_message.txt
          echo "::set-output name=commit_message::$(cat commit_message.txt)"
      
      #创建发布
      - name: Create Release
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN : ${{secrets.GITHUB_TOKEN}}
        with:
          #token: ${{ secrets.Releases }}
          #tag_name: v1.0.0
          #release_name: Release 1.0.0
          #draft: false
          #prerelease: false
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}
          body: |
            Auto-generated build
            版本：v${{ steps.get_version.outputs.version }}
            ${{ steps.get_commit_message.outputs.commit_message }}
          draft: false
          prerelease: false

      #- name: Publish
      #  run: dotnet publish --configuration Release --output publish

      #上传资产
      - name: Upload Release Asset
        if: ${{ needs.check_version_modified.outputs.modified == 'true' }}
        id: upload_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN : ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./DGJv3/bin/Release/DGJv3.dll
          asset_name: DGJv3.dll
          asset_content_type: application/octet-stream
